// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}




model Account {
  id                 String  @id @default(cuid()) @map("_id")
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  
  access_token       String?  
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String?
  email         String   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Post          Post[]

}

model VerificationToken {
  identifier String @id @map("_id")
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model Category { 
  id String @id @default(cuid()) @map("_id")
  slug String @unique 
  title String
  img String?
  Posts Post[]
}
model Post {
  id        String    @id @default(cuid()) @map("_id")
  createdAt DateTime  @default(now())
  slug      String    @unique
  title     String
  desc      String
  img       String?
  views     Int       @default(0)
  catSlug   String
  cat       Category  @relation(fields: [catSlug], references: [slug]) 
  userEmail String
  user      User      @relation(fields: [userEmail], references: [email]) 
 

  // Additional fields...
}


model Article { 
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  description    String
  date           DateTime
  author         String
  filteredImages String[]   // Array of image URLs
  content        Content[]  // Array of embedded content objects
  topic          String
}

model Content { 
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  heading   String?  // Optional heading
  paragraphs String[] // Array of paragraphs
  articleId String    @map("_articleId") @db.ObjectId
  article   Article   @relation(fields: [articleId], references: [id])
}